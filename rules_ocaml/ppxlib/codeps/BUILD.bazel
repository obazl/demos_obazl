# $ bazel test ppx/ppx_codeps:test

load(
    "@rules_ocaml//build:rules.bzl",
    "ocaml_module",
    "ocaml_test")
load("@rules_ppx//build:rules.bzl", "ppx_executable")

###########
ocaml_test(
    name = "test",
    main = ":Test",
    timeout = "short"
)

ocaml_module(
    name   = "Test",
    struct = "test.ml",
    deps = [
        "@opam.ounit2//lib/ounit2",
        ":Hello",     # the transformed and compiled test code

        # codeps - compile-time (post-ppx) deps, provided by ppx
        # executable:
        # "@opam.ppx_sexp_conv//lib/runtime-lib",
        # "@opam.ppx_deriving//lib/runtime",
    ],

    ppx = ":ppx.exe", # transforms test.ml before compilation

    ## Setting ppx_print to text has two effects: it makes it
    ## possible to inspect the ppx output file, and it allows the
    ## compiler to include source code in error messsages. For
    ## example, if we comment out the dependency on
    ## @opam.ppx_deriving//lib/runtime:
    # 6 |       (let __1 () (a : int) b = Ppx_deriving_runtime.compare a b
    #                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    # Error: Unbound module Ppx_deriving_runtime
    ## With print:binary! (the default), the error message is just:
    # Error: Unbound module Ppx_deriving_runtime

    ppx_print = "@rules_ppx//print:text",

    ## Module Ppx_deriving_runtime is provided by
    ## @opam.ppx_deriving//lib/runtime, so if we fail to list that as a
    ## compile-time dep of this module, we'll see that Unbound module
    ## error.

    ## To reiterate: the use of Ppx_deriving_runtime is inserted by
    ## the ppx executable (when it processes [%derive.ord ...]),
    ## thereby inducing a compile-time dependency on whatever library
    ## provides the module.
)

#############
ocaml_module(
    name = "Hello",
    opts = [
        ## the ppx injects code (int_of_sexp, Sexp) that depends on
        ## these modules. usually these would be opened in the source
        ## file, but for demo purposes we open them on the command
        ## line. either way, we must also list the `sexplib` package
        ## that contains them as a dependency, either here in 'deps'
        ## or in the `ppx_codeps` attribute of the ppx transformer.

        "-open", "Sexplib",
        "-open", "Sexplib.Std",
    ],
    # open = [
    # we don't need to do this since this is listed as a ppx_codep of :ppx
    # but we still need to pass -open
    #     "@opam.sexplib//lib/sexplib",
    # ],
    ppx = ":ppx.exe",
    # ppx_print = "@rules_ppx//print:text",  # uncomment to get readable output
    struct = "hello.ml",
    deps = [
        # src file contains ref to "Sexp.to_string" so we need to
        # depend on this lib:
        "@opam.sexplib//lib/sexplib",

        # "@opam.ppx_sexp_conv//lib/runtime-lib",
        # we do not need to depend on them here, since they are
        # listed as ppx_codeps of the ppx.
    ],
)

###############
ppx_executable(
    name = "ppx.exe",
    main = ":driver", # obazl will place this last in the list of deps
    # main = "@opam.ppxlib//runner:ppxlib_runner.cmx",
    # main_opam = "ppxlib.runner",
    # opts = [],                # obazl will automatically add '-predicates ppx_driver'
    prologue = [
        ## without this, we get "Error: Cannot locate deriver sexp"
        ## or "Error: Ppxlib.Deriving: 'sexp' is not a supported type deriving generator"
        ## when we try to use this ppx executable to transform
        ## hello.ml above, since it contains extension point
        ## "[@@deriving sexp]".
        ## introduces codeps
        ## "@opam.ppx_sexp_conv//lib/runtime-lib", and "@opam.sexplib0"
        "@opam.ppx_sexp_conv//lib/ppx_sexp_conv",

        ## without the following two derivers, ppx transformation of
        ## test.ml fails. they indirectly introduce a ppx_codep: they
        ## depend on @opam.ppx_deriving//lib/api, which has a ppx_codep on
        ## @opam.ppx_deriving//lib/runtime:
        "@opam.ppx_deriving//lib/ord",
        "@opam.ppx_deriving//lib/show",
        ## Note that although these are needed for test.ml, they are
        ## ppx deps, not dependencies of test.ml. That is, they are
        ## needed by the ppx executable to transform test.ml, but they
        ## are not needed to compile the transformed output. So adding
        ## them as deps of test.ml will not work.
    ],
    ## Use of ppx_codeps here is optional. They could also be added
    ## to the compile rules that use this ppx to transform their
    ## sources. Put here, they will be carried along with the ppx
    ## executable and be automatically used wherever it is used - that
    ## is, propagated as deps on the files it transforms. this
    ## obviates the need to manually add these deps to each rule that
    ## depends on this one for ppx transformation.
    ppx_codeps = [
        ## without this, compilation of hello.ml will fail with
        ## "Unbound module" errors (unless the source file lists them
        ## as direct deps).
        # "@opam.ppx_sexp_conv//lib/runtime-lib",

        ## FIXME: this should be pulled in by the deps on
        ## @opam.ppx_deriving//lib/show and ord in the prologue
        "@opam.ppx_deriving//lib/runtime",

        # "@opam.sexplib//lib/sexplib",

        ## HOWEVER: we do not need to list it, because the transitive
        ## closure of the deps includes some ppx_codeps, including
        ## this one, as you can see by running
        ##  bazel query 'deps(@opam.ppx_sexp_conv//lib/ppx_sexp_conv)'
        ##  bazel query 'deps(@opam.ppx_sexp_conv//lib/expander)'
    ],

    ## what's this for?
    # data = glob(["opam/lib/stublibs/*"], allow_empty=True)
)

ocaml_module(
    name = "driver",
    struct = ":ppxlib_driver_wrapper.ml",
    deps   = ["@opam.ppxlib//lib/ppxlib"],
    opts = ["-linkall"],
    visibility = ["//visibility:public"]
)

########
genrule(
    name = "gendriver",
    outs = ["ppxlib_driver_wrapper.ml"],
    cmd = "\n".join([
        "echo \"(* GENERATED FILE - DO NOT EDIT *)\" > \"$@\"",
        "echo \"let () = Ppxlib.Driver.standalone ()\" >> \"$@\"",
    ]),
)
