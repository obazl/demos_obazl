## This example demonstrates how to use `genrule` to run a PPX
## transformation. Normally you would not want to do this,
## for obvious reasons.

# $ bazel test ppx/genrule:test

## demonstrates how to run a ppx manually using a `genrule`

load(
    "@rules_ocaml//build:rules.bzl",
    "ocaml_module",
    "ocaml_test")
load("@rules_ppx//build:rules.bzl", "ppx_executable")

load("@bazel_skylib//rules:common_settings.bzl", "string_flag")

string_flag(
    name = "msg",
    build_setting_default = "hello",
    values = [
        "hello",
        "goodbye",
    ],
)

config_setting(
    name = "hello",
    flag_values = {":msg": "hello"},
)

config_setting(
    name = "goodbye",
    flag_values = {":msg": "goodbye"},
)

###########
ocaml_test(
    name = "test",
    main = ":Test",
    # opts = ["-verbose"],
    timeout = "short"
)

ocaml_module(
    name = "Test",
    struct = "test.ml",
    deps = [
        ":Hello",
        "@opam.ounit2//lib"
    ]
)

#############
ocaml_module(
    name = "Hello",

    ## use output of genrule that runs the ppx
    struct = "tmp/hello.ml",  # output of genrule, which will be triggered
    deps = [
        "@opam.core//lib"
    ],

    ## normally you would use these convenience attribs to tell the
    ## `ocaml_module` rule run the ppx as an action before compiling:
    # src  = "hello.ml",
    # ppx  = ":ppx.exe",
)

## switch to get text output
PPX_PRINT=""  # text output
# PPX_PRINT = "-dump-ast"  # binary output

# In this case, our ppx.exe depends on the 'base' pkg, which wants to
# dlopen some "stublibs". The ocaml rules know how to deal with this automatically,
# but genrule does not, so we have to list those libs as inputs and tell Bazel where to find them.

# (This is necessary when using ocamlc.opt or ocamlc.byte.)

########
genrule(
    name = "transform",
    outs = ["tmp/hello.ml"],
    srcs = ["hello.ml",
            "@opam.stublibs//lib/stublibs:dllbase_internalhash_types_stubs.so",
            "@opam.stublibs//lib/stublibs:dllbase_stubs.so"],
    ## due to filename->module_name rules, output must be hello.ml, not e.g. hello.pp.ml
    ## $(location :ppx.exe) resolves to wherever Bazel placed ppx.exe
    ## {print_fmt} is for string interpolation
    cmd = " ".join([
        "STUBLIBS=`dirname $(execpath @opam.stublibs//lib/stublibs:dllbase_internalhash_types_stubs.so)`;",
        "export DYLD_LIBRARY_PATH=$$STUBLIBS;", ## MacOS
        "$(location :ppx.exe)",
        "{}".format(PPX_PRINT),
        "$(location hello.ml) > $@"
    ]),
    tools = [":ppx.exe"],
)

###############
ppx_executable(
    name = "ppx.exe",
    main = ":Driver",  # obazl will place main last in the list of deps
    prologue = [
        # contains handler for `[%sexp ]` extension
        "@opam.ppx_sexp_value//lib",
    ],
)

###########
ocaml_module(
    name = "Driver",
    struct = ":ppxlib_driver.ml", # this is in the 'outs' of the genrule
    deps = ["@opam.ppxlib//lib"],
)

########
genrule(
    name = "gendriver",
    outs = ["ppxlib_driver.ml"],
    cmd = "\n".join([
        "echo \"(* GENERATED FILE - DO NOT EDIT *)\" > \"$@\"",
        "echo \"let () = Ppxlib.Driver.standalone ()\" >> \"$@\"",
    ]),
)
