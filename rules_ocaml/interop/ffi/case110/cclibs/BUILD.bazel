# https://ocaml.org/manual/intfc.html

load(
    "@rules_ocaml//build:rules.bzl",
    "ocaml_module",
    # "ocaml_test"
)

ocaml_module(
    name = "Alpha",
    struct = "alpha.ml",
    deps = select({
        "//interop/ffi/case110:dynamic": [":dllalpha.so"],
        "//interop/ffi/case110:static":  [":alpha"],
        # FIXME: default depends on platform -
        # dso for macos, static for linux
        # "//conditions:default": ["dllalpha.so"]
        "//conditions:default": [":alpha"]
    }),
    # cc_deps = [":alpha"],
    opts = [
        "-verbose",
        "-ccopt", "-Wl,-v" ## pass verbose to assembler
    ],
    visibility = ["//interop/ffi/case110:__pkg__"],
)

## bazel 4.2.0: produces both .a and .so
## bazel 5+: produces .a
cc_library(
    name = "alpha",
    srcs = [
        "alpha_adapter.c",
        "alpha.c",
        "alpha.h",
    ],
    alwayslink = True,
    linkstatic = True,
    copts = [
        # "version",
        "-I$(@ocaml)/lib/c",
        # "-Iexternal/ocaml~0.0.0/lib/c",
        # "-lcamlrun"
    ],
    deps = ["@ocaml//lib/c:sdk"],
    toolchains = ["//:repo_paths"],
    visibility = ["//interop/ffi/case110:__pkg__"],
)

cc_binary(
    name = "dllalpha.so",
    linkshared = True,
    srcs = [":alpha"], # we depend on the static lib
    toolchains = ["//:repo_paths"],
    visibility = ["//interop/ffi/case110:__pkg__"],
)
