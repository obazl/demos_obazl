#!/usr/bin/env bash

VERBOSE=
V=
ANNOUNCE=
QUIET="--noshow_loading_progress \
       --noshow_progress \
       --show_result 0 \
       --ui_event_filters=-INFO,-DEBUG"

QUIET_STARTUP="--quiet"

TARGET="//... --build_tests_only"

while getopts "vt:" arg; do
  case $arg in
      v)
          V=1
          ANNOUNCE="--announce_rc"
          QUIET=
          QUIET_STARTUP=
          VERBOSE="--color=yes --subcommands=pretty_print"
          ;;
      t)
          TARGET=${OPTARG}
          ;;
  esac
done

# set -x

STARTUP_PARAMS="--ignore_all_rc_files ${QUIET_STARTUP}"

# STARTUP_PARAMS="--nosystem_rc \
#     --nohome_rc \
#     --nosystem_rc \
#     --noworkspace_rc \


PARAMS="${ANNOUNCE} \
    --lockfile_mode=off \
    --symlink_prefix=.bazel/ \
    --repository_cache= \
    --nokeep_state_after_build \
    --registry=https://raw.githubusercontent.com/obazl/registry/main/ \
    --registry=https://bcr.bazel.build \
    ${QUIET}"

if [[ $V -eq 1 ]]; then
   set -x
fi

bazel --quiet clean --expunge --ui_event_filters=-INFO
printf "%s\n" "Toolchain: ocamlopt.opt (sys>sys)"
if [ -z ${QUIET_STARTUP:+x} ]; then
    echo ""
fi
bazel ${STARTUP_PARAMS} \
      test $TARGET \
      ${PARAMS} \
      $VERBOSE
return_code=$?
if [ $return_code -eq 0 ]; then
  echo ""
else
  echo "bazel test with exit code: $return_code"
fi

bazel clean --expunge --ui_event_filters=-INFO
printf "%s\n" "Toolchain: ocamlc.byte (vm>vm)"
if [ -z ${QUIET_STARTUP:+x} ]; then
    echo ""
fi
bazel ${STARTUP_PARAMS} \
      test $TARGET \
      ${PARAMS} \
      $VERBOSE \
      --host_platform=@rules_ocaml//platform:ocamlc.byte
return_code=$?
if [ $return_code -eq 0 ]; then
  echo ""
else
  echo "bazel test with exit code: $return_code"
fi

bazel clean --expunge --ui_event_filters=-INFO
printf "%s\n" "Toolchain: ocamlc.opt (sys>vm)"
if [ -z ${QUIET_STARTUP:+x} ]; then
    echo ""
fi
bazel ${STARTUP_PARAMS} \
      test $TARGET \
      ${PARAMS} \
      $VERBOSE \
      --host_platform=@rules_ocaml//platform:ocamlc.opt \
      --platforms=@rules_ocaml//platform:ocamlc.byte
return_code=$?
if [ $return_code -eq 0 ]; then
  echo ""
else
  echo "bazel test with exit code: $return_code"
fi

bazel clean --expunge --ui_event_filters=-INFO
printf "%s\n" "Toolchain: ocamlopt.byte (vm>sys)"
if [ -z ${QUIET_STARTUP:+x} ]; then
    echo ""
fi
bazel ${STARTUP_PARAMS} \
      test $TARGET \
      ${PARAMS} \
      $VERBOSE \
      --host_platform=@rules_ocaml//platform:ocamlopt.byte \
      --platforms=@rules_ocaml//platform:ocamlopt.opt

return_code=$?
if [ $return_code -eq 0 ]; then
  echo ""
else
  echo "bazel test with exit code: $return_code"
fi
