load(
    "@rules_ocaml//build:rules.bzl",
    "ocaml_binary",
    "ocaml_library",
    "ocaml_module",
    "ocaml_test"
)

package(default_visibility = ["//visibility:public"])

OPTS = ["-w", "@1..3@5..28@31..39@43@46..47@49..57@61..62@67@69-40"]

DEPS = ["@opam.ctypes//lib",
        "@opam.ctypes-foreign//lib",
        "@opam.ctypes//stubs/lib"]

# NB: dune archives this module

#############
ocaml_module(
    name   = "Date_stubs",
    struct = "date_stubs.ml",
    opts   = OPTS,
    deps   = DEPS
)

## dune log:
# Running[1]: (cd _build/default && /Users/gar/.opam/5.3.0/bin/ocamlc.opt -w @1..3@5..28@31..39@43@46..47@49..57@61..62@67@69-40 -strict-sequence -strict-formats -short-paths -keep-locs -g -bin-annot -bin-annot-occurrences -I stub-generation/bindings/.date_stubs.objs/byte -I /Users/gar/.opam/5.3.0/lib/bigarray-compat -I /Users/gar/.opam/5.3.0/lib/ctypes -I /Users/gar/.opam/5.3.0/lib/integers -I /Users/gar/.opam/5.3.0/lib/stdlib-shims -no-alias-deps -opaque -o stub-generation/bindings/.date_stubs.objs/byte/date_stubs.cmo -c -impl stub-generation/bindings/date_stubs.ml)
# Running[2]: (cd _build/default/.dune/ccomp && /usr/bin/cc -E -P header_check.h) > _build/default/.dune/ccomp/ccomp
# Running[3]: (cd _build/default && /Users/gar/.opam/5.3.0/bin/ocamlopt.opt -w @1..3@5..28@31..39@43@46..47@49..57@61..62@67@69-40 -strict-sequence -strict-formats -short-paths -keep-locs -g -I stub-generation/bindings/.date_stubs.objs/byte -I stub-generation/bindings/.date_stubs.objs/native -I /Users/gar/.opam/5.3.0/lib/bigarray-compat -I /Users/gar/.opam/5.3.0/lib/ctypes -I /Users/gar/.opam/5.3.0/lib/integers -I /Users/gar/.opam/5.3.0/lib/stdlib-shims -intf-suffix .ml -no-alias-deps -opaque -o stub-generation/bindings/.date_stubs.objs/native/date_stubs.cmx -c -impl stub-generation/bindings/date_stubs.ml)

# #############
# # Step 2
# # bindings_c_gen.cmx: bindings_c_gen.ml bindings.cmx
# # 	ocamlfind ocamlopt -w '@f@p@u@s@40' -package ctypes,ctypes.foreign,ctypes.stubs -c bindings_c_gen.ml bindings.cmx

# # WARNING: we changed the source to write to stdout,
# # so that we can choose the output filename in genrule below.
# ocaml_module(
#     name          = "Bindings_c_gen",
#     struct        = "bindings_c_gen.ml",
#     opts          = OPTS,
#     deps          = DEPS + [
#         ":Bindings"
#     ],
# )

# ##############
# # Step 3 compiling
# # bindings_c_gen: bindings_c_gen.cmx bindings.cmx
# # 	ocamlfind ocamlopt -w '@f@p@u@s@40' -package ctypes,ctypes.foreign,ctypes.stubs -linkpkg -o bindings_c_gen bindings.cmx bindings_c_gen.cmx

# ocaml_binary(
#     name          = "bindings_c_gen",
#     prologue      = [":Bindings"],
#     main          = ":Bindings_c_gen",
#     opts          = OPTS + ["-verbose"],
# )

# # Step 3 executing
# # bindings_stubs_gen.c: bindings_c_gen
# # 	./bindings_c_gen

# genrule(
#     name = "make_c_stubs",
#     outs = ["bindings_stubs_gen.c"],
#     tools = [":bindings_c_gen"],
#     cmd  = "$(execpath :bindings_c_gen) > $@",
# )

# # #############
# # Step 4 compiling
# # bindings_stubs_gen.o: bindings_stubs_gen.c
# # 	ocamlfind ocamlc -w '@f@p@u@s@40' -package ctypes,ctypes.foreign -c bindings_stubs_gen.c

# # Step 4 compiling
# # bindings_stubs_gen: bindings_stubs_gen.o
# # 	cc -o bindings_stubs_gen bindings_stubs_gen.o

# # NOTE: we do not need to compile the .o file separately
# cc_binary(
#     name  = "bindings_stubs_gen",
#     srcs = ["bindings_stubs_gen.c"],
#     deps = ["@opam.ctypes//lib:hdrs"]
# )

# ################
# # Step 5
# # bindings_stubs.ml: bindings_stubs_gen
# # 	./bindings_stubs_gen > bindings_stubs.ml
# genrule(
#     name = "bindings_stubs_ml",
#     outs = ["bindings_stubs.ml"],
#     tools = ["bindings_stubs_gen"],
#     cmd = "$(location bindings_stubs_gen) > \"$@\"",
# )

# ################
# # Step 6
# # bindings_stubs.cmx: bindings_stubs.ml
# # 	ocamlfind ocamlopt -w '@f@p@u@s@40' -package ctypes,ctypes.foreign,ctypes.stubs -c bindings_stubs.ml

# ocaml_module(
#     name   = "Bindings_stubs",
#     struct = "bindings_stubs.ml",
#     opts   = OPTS,
#     deps   = DEPS
# )

# ################
# # Use in the main program
# # main.cmx: bindings_stubs.cmx main.ml
# # 	ocamlfind ocamlopt -w '@f@p@u@s@40' -package ctypes,ctypes.foreign,ctypes.stubs -c main.ml bindings_stubs.cmx
# ocaml_module(
#     name   = "Main",
#     struct = "main.ml",
#     opts   = OPTS,
#     deps   = DEPS + [":Bindings", ":Bindings_stubs"]
# )

# # main: main.cmx
# # 	ocamlfind ocamlopt -w '@f@p@u@s@40' -package ctypes,ctypes.foreign,ctypes.stubs -linkpkg -o main bindings.cmx bindings_stubs.cmx main.cmx

# ## NOTE: OBazl propagates deps, so we need not list here
# ## the deps of Main.cmx.
# ocaml_binary(
#     name     = "main",
#     main     = ":Main",
#     opts     = OPTS,
# )

# ## Now we can '$ bazel run ffi/ctypes/structs:main'

