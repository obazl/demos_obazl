load(
    "@rules_ocaml//build:rules.bzl",
    "ocaml_module",
    "ocaml_library",
    "ocaml_ns",
    "ocaml_test",
)

ocaml_test(
    name    = "test",
    main    = "Test",
    timeout = "short"
)

ocaml_module(
    name    = "Test",
    struct  = "test.ml",
    deps    = [
        ":libGreek",
        "@opam.ounit2//lib",
    ],
)

# package resolver and submodules in one library
ocaml_library(
    name = "libGreek",
    manifest = [
        ":nsGreek",
        ":Alpha",
        ":Beta",
        ":Gamma",
        "//mwe/rgb:R",
        "//mwe/rgb:G",
        "//mwe/rgb:B",
        "//ns/bottomup/submodules/rgb:libRGB",
        "//ns/bottomup/ns_import_as/colors/cmyk:libCMYK",
    ],
)

##################
ocaml_ns(
    name = "nsGreek",
    ns   = "Greek",
    submodules = [
        # elective submodules
        "Alpha",
        "Beta",
        "Gamma",
        ],
    import_as = {
        # exogenous submodules, namespaced or not
        "//mwe/rgb:R": "R",
        "//mwe/rgb:G": "G",
        "//mwe/rgb:B": "B",
    },
    ns_import_as = {
        # exogenous namespaces
        "//ns/bottomup/ns_import_as/colors/cmyk:nsCMYK": "CMYK"
    },
    ns_merge = [
        # exogenous namespaced submodules
        "//ns/bottomup/submodules/rgb:nsRGB"
    ],
)

#############
ocaml_module(
    name        = "Alpha",
    ns          = ":nsGreek",
    struct      = "alpha.ml",
)

ocaml_module(
    name        = "Beta",
    ns          = ":nsGreek",
    struct      = "beta.ml",
)

ocaml_module(
    name        = "Gamma",
    ns          = ":nsGreek",
    struct      = "gamma.ml",
)
