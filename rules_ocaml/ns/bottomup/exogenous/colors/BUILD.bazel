load(
    "@rules_ocaml//build:rules.bzl",
    "ocaml_library",
    "ocaml_module",
    "ocaml_ns",
    "ocaml_test",
)

## instead of composing namespaces, we fuse their submodules, so we
## can refer to them without using their ns names.
## E.g. Colors.R => RGB.Red
ocaml_ns(
    name = "colors_ns",
    ns   = "Colors",
    include = {
        ## ns_resolver modules:
        "//ns/bottomup/exogenous/colors/rgb:Red"   : "R",
        "//ns/bottomup/exogenous/colors/rgb:Green" : "G",
        "//ns/bottomup/exogenous/colors/rgb:Blue"  : "B",
        "//ns/bottomup/exogenous/colors/hsb:Hue"        : "H",
        "//ns/bottomup/exogenous/colors/hsb:Saturation" : "S",
        "//ns/bottomup/exogenous/colors/hsb:Brightness" : "Br",
        "//ns/bottomup/exogenous/colors/cmyk:Cyan"    : "C",
        "//ns/bottomup/exogenous/colors/cmyk:Magenta" : "M",
        "//ns/bottomup/exogenous/colors/cmyk:Yellow"  : "Y",
        "//ns/bottomup/exogenous/colors/cmyk:Key"     : "K",
    },
)

ocaml_library(
    name = "olibColors",
    manifest = [
        ":colors_ns",
        "//ns/bottomup/exogenous/colors/rgb:olibRGB",
        "//ns/bottomup/exogenous/colors/hsb:olibHSB",
        "//ns/bottomup/exogenous/colors/cmyk:olibCMYK",
    ],
    visibility = ["//visibility:public"],
)

#############
ocaml_module(
    name   = "Test",
    struct = "test.ml",
    deps = [
        ":olibColors",
        ":colors_ns",
        "@opam.ounit2//lib"
    ],
)

ocaml_test(
    timeout = "short",
    name = "test",
    main = ":Test",
)
