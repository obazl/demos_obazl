load(
    "@rules_ocaml//build:rules.bzl",
    "ocaml_archive",
    "ocaml_library",
    "ocaml_module",
    "ocaml_ns_library",
    "ocaml_test",
)
load("@obazl_rules_ocaml//ocaml:macros.bzl", "ns_env")

# In this example we use renaming but we do not use a resolver.
ns_env(prefix = "foo")  # "red.ml", "green.ml"]) #, "blue.ml"])

ocaml_test(
    timeout = "short",
    name = "test",
    main = "test.ml",
    deps = [":color", "@opam.ounit2//lib"],
)

ocaml_ns_library(
    name = "color",
    # use user-provided file as main ns module. in this case it will be renamed (copied) to color.ml:
    main = "color_main.ml",  ## Notice that we do NOT have a compile rule for color_main.ml
    manifest = {
        ":Red": "Red",
        ":Green": "Green",
        ":Blue": "Blue",
    },
    visibility = ["//visibility:public"],
)

ocaml_module(
    name = "Red",
    ns_env = ":ns_env",
    struct = "red.ml",
)

ocaml_module(
    name = "Green",
    ns_env = ":ns_env",
    struct = "green.ml",
)

ocaml_module(
    name = "Blue",
    ns_env = ":ns_env",
    struct = "blue.ml",
    visibility = [
        "//ns/obazl/class03/case09:__pkg__",
        "//ns/obazl/class03/case10:__pkg__",
        "//ns/obazl/set035/case03:__pkg__",
        "//ns/obazl/set035/case04:__pkg__",
    ],
)
