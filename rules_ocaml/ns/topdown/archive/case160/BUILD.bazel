## new/case160: nslib nesting: ns lib Color contains ns lib Greek as a submodule

load(
    "@rules_ocaml//build:rules.bzl",
    # "ocaml_archive",
    "ocaml_library",
    "ocaml_module",
    "ocaml_ns_archive",
    "ocaml_ns_library",
    "ocaml_test",
)

###########
ocaml_test(
    name = "test",
    main = "Test",
    timeout = "short",
)

ocaml_module(
    name   = "Test",
    struct = "test.ml",
    deps = [
        "@ounit2//lib/ounit2",
        ":libColor"
    ]
)

ocaml_ns_archive(
    name = "libColor",
    ns_name = "Color",
    manifest = [
        ":Red", # ":RedModule",
        ":Green",
        ":Blue",
        ":Greek", # ":libGreek"
    ],
    # subarchives = [
    #     ":libGreek"
    # ],
)

ocaml_module(
    name = "Red",  # "RedModule",
    module_name = "Red",
    struct = "red.ml",
    deps = [":Green"],
)

ocaml_module(
    name = "Green",
    struct = "green.ml",
)

ocaml_module(
    name = "Blue",
    struct = "blue.ml",
)

###################
# ocaml_ns_archive(  # nope
# ocaml_library(  # nope
ocaml_ns_library(  # ok
    name = "Greek", # "libGreek",
    # ns_name = "Greek",
    manifest = [
        ":Alpha", # ":AlphaModule",
        ":Beta",
        ":Gamma"
    ],
)

ocaml_module(
    name = "Alpha", # "AlphaModule",
    # module_name = "Alpha",
    struct = "alpha.ml",
)

ocaml_module(
    name = "Beta",
    struct = "beta.ml",
)

ocaml_module(
    name = "Gamma",
    struct = "gamma.ml",
)

