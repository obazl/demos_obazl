load("@obazl_rules_ocaml//ocaml:build.bzl",
     "ocaml_binary",
     "ocaml_library",
     "ocaml_ppx_pipeline")

ocaml_ppx_pipeline(
    name = "metaquot",
    visibility = ["//visibility:public"],
    message = "Compiling //ppx:metaquot_ppxlib",
    opts = ["-linkall",
            "-linkpkg",
             "-predicates", "ppx_driver", ## <== DON'T FORGET THIS
            "-verbose"],
    deps = ["@ocaml//pkg:base",
            "@ocaml//pkg:ppxlib",
            "@ocaml//pkg:ppxlib.metaquot",
            "@ocaml//pkg:ppxlib.runner",
    ],
)

## Use the compiled metaquot preprocessor to transform our ppx source.
genrule(
    name = "preproc",
    message = "Preprocessing sources...",
    tools = [":metaquot"],
    srcs = ["src/deriving_poly.ml"],
    outs = ["tmp_/deriving_poly.ml"],
    cmd = "$(location :metaquot)"
    + " --cookie 'library-name=\"deriving_poly\"'"
    + " -dump-ast"
    + " --impl $<"
    + " -o \"$@\";"
)

ocaml_ppx_pipeline(
    name = "ppx",
    message = "Compiling executable ppx",
    visibility = ["//visibility:public"],
    srcs = [":preproc",
            "@obazl_rules_ocaml//ppxlib:driver_standalone_shim"
    ],
    opts = ["-linkpkg"],
    deps = ["@ocaml//pkg:base",
            "@ocaml//pkg:ppxlib"],
)

## Use the compiled preprocessor to preprocess test sources.
genrule(
    name = "preproc_test",
    message = "Preprocessing test sources...",
    tools = [":ppx"],
    srcs = ["test/test.ml"],
    outs = ["tmp_/test.ml"],
    cmd = "for f in $(SRCS);"
    + "do"
    + "    echo $$f;"
    + "    BNAME=`basename $$f`;"
    + "    $(location :ppx)"
    # + "    --dump-ast"
    + "    $$f > $(@D)/$$BNAME;"
    + " done"
)

ocaml_binary(
    name = "test",
    srcs = [":preproc_test"],
    deps = ["@ocaml//pkg:base",
            "@ocaml//pkg:ppxlib",
            ":preproc_test"
    ],
    copts = [
        "-w", "-49",
        # "-quiet",
        "-verbose",
        "-linkall",
    ],
)

