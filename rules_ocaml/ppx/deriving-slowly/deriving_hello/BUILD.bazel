## WARNING: does not compile with 4.13.0

# https://github.com/rgrinberg/deriving-slowly/blob/master/deriving-hello/src/deriving_hello.ml

load("@obazl_rules_ocaml//ocaml:build.bzl",
     "ocaml_binary",
     "ocaml_library",
     "ocaml_ppx_pipeline")

ocaml_ppx_pipeline(
    name = "metaquot",
    visibility = ["//visibility:public"],
    message = "Compiling //ppx:metaquot_ppxlib",
    opts = ["-linkall",
            "-linkpkg",
             "-predicates", "ppx_driver", ## <== DON'T FORGET THIS
            "-verbose"],
    deps = ["@ocaml//pkg:base",
            "@ocaml//pkg:ppxlib",
            "@ocaml//pkg:ppxlib.metaquot",
            "@ocaml//pkg:ppxlib.runner",
    ],
)

## Use the compiled metaquot preprocessor to transform our ppx source.
genrule(
    name = "preproc",
    message = "Preprocessing sources...",
    tools = [":metaquot"], ## resolves to the executable produced by
                           ## the ocaml_ppx_pipeline target above.
    srcs = ["src/deriving_hello.ml"],
    outs = ["deriving_hello.pp.ml"],
    ## NOTE: $(location :metaquot) resolves to the path of the
    ## :metaquot target listed in the tools attribute.
    cmd = "$(location :metaquot)"
    + " --cookie 'library-name=\"deriving_hello\"'"
    + " -dump-ast"
    + " --impl $< > \"$@\";"
    # + " $< > \"$@\";"
)

## Compile the transformed source as a normal library (linked or not).
ocaml_library(
    name = "deriving_hello_lib",
    message = "Compiling preprocessed sources...",
    srcs = [":preproc"],  ## resolves to the preprocessed files
                          ## produced by the genrule named "preproc".
    copts = ["-linkall",
             "-predicates", "ppx_driver",
             # tell ocamlfind we want native libs:
             "-predicates", "native",
             "-a"],  # produce a .cmxa file
    deps = ["@ocaml//pkg:base",
            "@ocaml//pkg:ppxlib"]
)

## Turn the lib into an executable pipeline:
# ocaml_ppx_binary(
ocaml_ppx_pipeline(
    name = "deriving_hello_bin",
    message = "Compiling executable ppx",
    visibility = ["//visibility:public"],
    srcs = [
        # A driver is REQUIRED for a ppx pipeline. Either of these will do:
        # "@obazl_rules_ocaml//ppxlib:driver_standalone_shim"
        "@obazl_rules_ocaml//ppx:migrate_parsetree_driver_shim"
    ],
    opts = ["-linkall",
            # this links findlib pkgs and has the side effect
            # of creating an executable:
             "-linkpkg",
    ],
    deps = ["@ocaml//pkg:base",
            "@ocaml//pkg:ppxlib",
            ":deriving_hello_lib",

            ## WARNING: adding either of the following two driver libs results in:
            ## Error: Ppxlib.Deriving: 'hello_world' is not a supported type deriving generator
            ## when we use the pipeline to process the test code.

            # "@ocaml//pkg:ocaml-migrate-parsetree.driver-main"
            # "@ocaml//pkg:ppxlib.runner"

            # OTOH, compiling the shims above seems to work - yet they
            # contain the same code as those two libs, i.e.
            # something like "let () = Migrate_parsetree.Driver.run_main ()".

            # BUT: the opam packages only contain cmxs files, not cmx files,
            # which presumably explains why linking them in does not work.

    ],
)

## Use the compiled preprocessor to preprocess test sources.
genrule(
    name = "preproc_test",
    message = "Preprocessing test sources...",
    tools = [":deriving_hello_bin"],
    srcs = ["test/hello_world_test.ml", "test/hello_world_test.mli"],
    ### ORDER MATTERS! Put the mli files before the ml files in the outputs!
    ## If you put the ml files first, you'll get
    ##     Error: Could not find the .cmi file for interface
    # (Note: this implies Bazel orders result of cmd to match outs param...)
    outs = ["pp_hello_world_test.mli", "pp_hello_world_test.ml"],
    # outs = ["pp_hello_world_test.ml"],
    ## NOTE: '$<' = input file, '$@' = output file
    cmd = "for f in $(SRCS);"
    + "do"
    + "    echo $$f;"
    + "    BNAME=`basename $$f`;"
    + "    $(location :deriving_hello_bin) --dump-ast $$f > $(@D)/pp_$$BNAME;"
    + " done"
)

ocaml_binary(
    name = "test",
    srcs = [":preproc_test"],
    deps = ["@ocaml//pkg:base",
            "@ocaml//pkg:ppxlib",
            ":preproc_test"
    ],
    copts = [
        "-w", "-49",
        # "-quiet",
        "-verbose",
        "-linkall",
    ],
)
