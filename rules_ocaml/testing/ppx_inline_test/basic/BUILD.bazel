load(
    "@rules_ocaml//build:rules.bzl",
    "ocaml_binary",
    "ocaml_module",
    "ocaml_test",
    "ppx_executable",
    "ppx_module",
)

LIBNAME="Hello"

ocaml_test(
    name = "test",
    args = [
        # "Tests are only executed when both these conditions are met:
        #  * the executable containing the tests is linked with ppx_inline_test.runner.lib
        #  * the executable containing the tests is called with command line arguments:
        #        your.exe inline-test-runner libname [options]"

        ## WARNING: the module under test was built with
        ## -inline-test-lib=="Hello"; if you pass anything else with
        ## inline-test-runner, running this test executable will
        ## report success, because it will not run the test.

        "inline-test-runner", LIBNAME,

        ## omitting it altogether gives: "You are doing something
        ## unexpected with the tests. No tests have been run. You
        ## should use the inline_tests_runner script to run tests."

        # "-list-test-names",
        # "-log",
    ],
    # opts = ["-verbose"],

    prologue = [
        "@ppx_inline_test//lib/runner/lib",
        ":Hello",
    ],
    ## :Runner contains Ppx_inline_test_lib.Runtime.exit (); obazl
    ## puts 'main' last
    main = ":Runner",

    timeout = "short"
)

ocaml_module(
    name   = "Runner",
    struct = "runner.ml",
    deps   = [
        "@ppx_inline_test//lib/runtime-lib",
    ],
)

ocaml_module(
    name = "Hello",
    ppx = ":ppx.exe",
    ppx_args = [
        "-inline-test-lib", LIBNAME
    ],
    ppx_print = "@rules_ocaml//ppx/print:text!",
    struct = "hello.ml",
    deps = [
        "@ppx_inline_test//lib/runtime-lib",
    ]
)

################################################################
ppx_executable(
    name = "ppx.exe",
    prologue = [
        "@ppx_inline_test//lib/ppx_inline_test",
    ],
    main = ":Driver",
    # ppx_codeps = [
    #     "@ppx_inline_test//lib/runtime-lib",
    # ]
)

#############
ppx_module(
    name = "Driver",
    struct = ":ppxlib_driver.ml",
    visibility = ["//visibility:public"],
    deps = ["@ppxlib//lib/ppxlib"],
)

########
genrule(
    name = "gendriver",
    outs = ["ppxlib_driver.ml"],
    cmd = "\n".join([
        "echo \"(* GENERATED FILE - DO NOT EDIT *)\" > \"$@\"",
        "echo \"let () = Ppxlib.Driver.standalone ()\" >> \"$@\"",
    ]),
)
