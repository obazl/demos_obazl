load("@bazel_skylib//rules:build_test.bzl", "build_test")

package(default_visibility = ["//visibility:public"])

load("@rules_ocaml//build:rules.bzl",
     "ocaml_archive",
     "ocamllex",
     "ocaml_module",
     "ocaml_test",
)

load("@tools_ocaml//rules:menhir.bzl", "menhir")

###########
ocaml_test(
    name     = "test",
    main     = ":ParserTest",
    visibility = ["//visibility:public"],
    timeout  = "short"
)
ocaml_module(
    name          = "ParserTest",
    struct        = "parserTest.ml",
    deps          = [
        ":libMwe",
        "@ounit2//lib/ounit2"
    ]
)

#############################
####  Aggregate Targets  ####

ocaml_archive(
    name     = "libMwe",
    manifest = [
        ":Ast",
        ":Lexer",
        ":Parser",
        ":ParserInterface"
    ],
)

#############################
####  Singleton Targets  ####

LIBMWE_COMPILE_OPTS = [
    "-w", "-39",
    "-no-strict-sequence",
    "-no-strict-formats",
]

ocaml_module(
    name          = "Ast",
    struct        = "ast.ml",
    opts          = LIBMWE_COMPILE_OPTS,
)

# Since we're using an --external-tokens defn of token,
# the lexer must depend on the same token module:
ocaml_module(
    name          = "Lexer",
    struct        = "lexer.ml",
    opts          = LIBMWE_COMPILE_OPTS,
    # open = [":Token"], # or put 'open Token' in lexer.mll
    deps          = [
        ":Parser" # :Token included in depgraph by transitivity
    ],
)

ocaml_module(
    name          = "Parser",
    struct        = "parser.ml",
    sig           = "parser.mli",
    opts          = LIBMWE_COMPILE_OPTS + ["-w", "-28"],
    deps          = [
        ":Ast",
        ":Token",
        "@menhirlib//lib/menhirLib",
    ],
)

ocaml_module(
    name          = "ParserInterface",
    struct        = "parserInterface.ml",
    opts          = LIBMWE_COMPILE_OPTS,
    deps          = [
        ":Lexer",
        ":Parser"
    ],
)

ocaml_module(
    name          = "Token",
    struct        = "token.ml"
)

##############################
########################
####  File Generators  ####

##########
ocamllex(
    name  = "lex_Lexer",
    src   = "lexer.mll",
    out   = "lexer.ml",
)

#######  emitting menhir ####
##########
menhir(
    name  = "menhir_Parser",
    tool  = "@ocaml//bin:menhir",
    grammars = ["parser.mly"],
    deps  = [":Ast", ":Token"],
    outs  = [
        "parser.ml", "parser.mli"
    ],
    # base = "Parser",
    tokens_unused = [ # suppress unused symbol warnings
        "TUnknown",
        "TCommentLineDirective",
        "TComment"
    ],
    token = ":Token", # --external-tokens
    flags = [
        "--table",
        "--explain",
    ]
)
