# demonstrates menhir processing using genrules only.
# for demo purpose only; normally you would use the 'menhir' rule.
# this will not work with top-down namespacing.

load("@bazel_skylib//rules:build_test.bzl", "build_test")

package(default_visibility = ["//visibility:public"])

load("@rules_ocaml//build:rules.bzl",
     "ocamllex",
     "ocaml_module",
     "ocaml_test",
)

build_test(
    name = "test",
    targets = [":Parser"]
)

ocaml_module(
    name          = "Parser",
    struct        = "parser.ml",
    sig           = "parser.mli",
    deps          = [":Ast"]
)

ocaml_module(
    name          = "Ast",
    struct        = "ast.ml",
)

genrule(
    name = "menhir1",
    srcs = ["parser.mly"],
    outs = ["parser.mock.ml"],
    tools = ["@opam.menhir//bin:menhir"],
    cmd  = " ".join([
        "$(execpath @opam.menhir//bin:menhir)",
        "$(SRCS)",
        "--base", "parser",
        "--infer-write-query $@"
    ])
)

# Target :Ast provides only Ast.cmx/o in DefaultInfo.
# The .cmi and .o files are provided by --output_groups=all
# So we must use a filegroup for that:
filegroup(
    name = "Ast_outs",
    srcs = [":Ast"],
    output_group = "all"
)

genrule(
    name = "menhir2",
    srcs = ["parser.mock.ml", ":Ast_outs"],
    outs = ["parser.inferred.mli"],
    tools = ["@opam.ocamlsdk//bin:ocamlc"],
    cmd  = " ".join([
        # "set -x;",
        "ASTOUTS=($(locations :Ast_outs));",
        # we need the dir so any output file will do
        "DEP=`dirname $${ASTOUTS[0]}`;",
        "$(execpath @opam.ocamlsdk//bin:ocamlc)",
        "-I $$DEP",
        "-i $(location parser.mock.ml)",
        "> $@;"
    ])
)

genrule(
    name = "menhir3",
    srcs = ["parser.mly", "parser.inferred.mli"],
    outs = ["parser.ml", "parser.mli"],
    tools = ["@opam.menhir//bin:menhir"],
    cmd  = " ".join([
        # "set -x;",
        "$(execpath @opam.menhir//bin:menhir)",
        "$(location parser.mly)",
        # "--base", "parser",
        "--infer-read-reply $(location parser.inferred.mli);",

        # menhir cmd puts output in same dir as input dir
        # which in this case is `dirname $(location parser.mly)`
        # which is parsing/menhir/handrolled.
        # But the output dir @D is determined by Bazel and may be elsewhere,
        # so we need to copy/move cmd output to the rule output dir.

        "cp `dirname $(location parser.mly)`/parser.ml $(RULEDIR)/;",
        "cp `dirname $(location parser.mly)`/parser.mli $(RULEDIR)/;",
        # "ls `dirname $(location parser.mly)`;"

    ])
)

# parser.deps will contain the ocamldep output; we need to parse it to
# list those deps in step menhir3 above. This is not automated here;
# you just have to run menhir2 and inspect the output. The 'menhir'
# rule automates it.

genrule(
    name = "menhir_deps",
    srcs = ["parser.mock.ml"],
    outs = ["parser.deps"],
    tools = ["@opam.ocamlsdk//bin:ocamldep"],
    cmd  = " ".join([
        "$(execpath @opam.ocamlsdk//bin:ocamldep)",
        "-modules",
        "$(SRCS)",
        "> $@"
    ])
)
